(setq-default dotspacemacs-configuration-layers
              '((colors :variables colors-enable-rainbow-identifiers t
                        :variables colors-enable-nyan-cat-progress-bar ,(display-graphic-p))
                (auto-completion :variables auto-completion-use-tab-instead-of-enter t)
                syntax-checking
                git
                html
                javascript
                markdown
                python
                c-c++
                common-lisp
                evil-snipe)

              dotspacemacs-startup-banner 'random
              )


(defun dotspacemacs/init ()
  "User initialization for Spacemacs. This function is called at the very
 startup."
  (setq company-mode-use-tab-instead-of-enter t)
  (setq-default git-magit-status-fullscreen t)
  (setq-default dotspacemacs-themes '(spacemacs-dark leuven zenburn))
  (setq-default evil-escape-key-sequence "jk")
  )


(defun dotspacemacs/config ()
  "This is were you can ultimately override default Spacemacs configuration.
This function is called at the very end of Spacemacs initialization."
  (add-to-list 'default-frame-alist '(width . 110))
  (add-to-list 'default-frame-alist '(height . 40))
  (setq company-dabbrev-ignore-case t)
  (setq inferior-lisp-program "/usr/bin/clisp")
  (setq js2-basic-offset 2)
  (setq js2-indent-level 2)
  (setq dotspacemacs-active-transparency 75)
  (setq dotspacemacs-inactive-transparency 75)
  (setq org-startup-folded nil)
  (set-frame-font "Source Code Pro for Powerline 10")
  (add-to-list 'default-frame-alist '(font . "Source Code Pro for Powerline 10"))
  (set-fontset-font "fontset-default" 'han '("方正清刻本悦宋简体" . "unicode-bmp"))
  (org-babel-do-load-languages 'org-babel-load-languages '((ditaa . t)))
  (eval-after-load 'evil
    '(progn
       (define-key evil-insert-state-map "\C-c" 'evil-normal-state)
       (define-key evil-visual-state-map "\C-c" 'evil-normal-state)
       (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
       (define-key evil-insert-state-map "\C-e" 'end-of-line)
       (define-key evil-insert-state-map "\C-s" 'save-buffer)
       (define-key evil-insert-state-map "\C-k" 'kill-line)
       (define-key evil-normal-state-map "\C-s" 'save-buffer)
       (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
       (define-key evil-motion-state-map "\C-e" 'evil-end-of-line)
       (define-key evil-normal-state-map "\C-f" 'evil-scroll-page-down)
       (define-key evil-insert-state-map "\C-f" 'forward-char)
       (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
       (define-key evil-normal-state-map "\C-b" 'evil-scroll-page-up)
       (define-key evil-insert-state-map "\C-b" 'backward-char)
       (define-key evil-visual-state-map "\C-b" 'evil-backward-char)
       (define-key evil-normal-state-map "\C-d" 'evil-delete-char)
       (define-key evil-insert-state-map "\C-d" 'evil-delete-char)
       (define-key evil-visual-state-map "\C-d" 'evil-delete-char)
       (define-key evil-normal-state-map "\C-n" 'evil-next-line)
       (define-key evil-insert-state-map "\C-n" 'evil-next-line)
       (define-key evil-visual-state-map "\C-n" 'evil-next-line)
       (define-key evil-normal-state-map "\C-p" 'evil-previous-line)
       (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
       (define-key evil-visual-state-map "\C-p" 'evil-previous-line)
       (define-key evil-normal-state-map "\C-w" 'evil-delete)
       (define-key evil-insert-state-map "\C-w" 'evil-delete)
       (define-key evil-visual-state-map "\C-w" 'evil-delete)))

  (setq inferior-lisp-program "/usr/bin/clisp")
  (add-hook 'prog-mode-hook
            (lambda () (modify-syntax-entry ?_ "w")))
)
